import pandas as pd
import numpy as np

# Function to perform basic generalization for k-anonymization
def generalize_data(df, quasi_identifiers, k=2):
    """
    Apply generalization (simple bucketing) to the quasi-identifiers to achieve k-anonymity.
    Args:
        df (pd.DataFrame): The input dataset.
        quasi_identifiers (list): List of column names to apply generalization.
        k (int): The minimum number of records for k-anonymity (default is 2).
    Returns:
        pd.DataFrame: The generalized dataset.
    """
    generalized_df = df.copy()

    # Generalization strategy: Bucketing (for simplicity)
    for col in quasi_identifiers:
        if generalized_df[col].dtype == 'object':  # For categorical data, apply a simple generalization
            generalized_df[col] = generalized_df[col].apply(lambda x: str(x)[0])  # Generalizing by taking the first letter/character
        else:  # For numerical data, apply bucketing (range binning)
            bin_size = (generalized_df[col].max() - generalized_df[col].min()) // k
            generalized_df[col] = generalized_df[col].apply(lambda x: (x // bin_size) * bin_size)
    
    return generalized_df

def import_and_process_data(file_path, drop_columns, quasi_identifiers, k=2):
    """
    Import the data from a CSV file, drop unnecessary columns, and perform k-anonymization.
    Args:
        file_path (str): Path to the CSV file.
        drop_columns (list): List of columns to drop.
        quasi_identifiers (list): Columns to generalize for k-anonymization.
        k (int): The minimum number of records for k-anonymity.
    Returns:
        pd.DataFrame: The k-anonymous dataset.
    """
    # Load data from CSV
    df = pd.read_csv(file_path)
    
    # Drop unnecessary columns
    df = df.drop(columns=drop_columns)
    
    # Perform k-anonymization
    result_df = generalize_data(df, quasi_identifiers, k)
    
    return result_df

def save_to_csv(df, output_file):
    """
    Save the processed DataFrame to a CSV file.
    Args:
        df (pd.DataFrame): The DataFrame to save.
        output_file (str): The path where the CSV file will be saved.
    """
    df.to_csv(output_file, index=False)
    print(f"Processed data saved to {output_file}")

# Example usage
if __name__ == "__main__":
    # Path to your input CSV file
    file_path = 'input_dataset.csv'
    
    # Columns to drop
    drop_columns = ['Name', 'Address']  # Example columns to drop
    
    # Quasi-identifiers (columns for k-anonymization)
    quasi_identifiers = ['Age', 'ZipCode']  # Example quasi-identifiers
    
    # Perform k-anonymization
    result_df = import_and_process_data(file_path, drop_columns, quasi_identifiers, k=18)
    
    # Save the result to a new CSV file
    save_to_csv(result_df, 'output_k_anonymous.csv')
